  openapi: 3.0.0
  info:
    title: Todo App API
    description: Complete API documentation for the Todo Application with authentication and todo management
    version: 1.0.0

  servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://todo-nodejs-7bwy.onrender.com/api-docs
    description: Production server



  tags:
    - name: Authentication
      description: User authentication endpoints
    - name: Users
      description: User management endpoints
    - name: Todos
      description: Todo management endpoints


  components:
    securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
  
    schemas:
      UserRegistration:
        type: object
        required:
          - name
          - email
          - password
        properties:
          name:
            type: string
          email:
            type: string
            format: email
          password:
            type: string
            format: password
            minLength: 6

      UserLogin:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            format: email
          password:
            type: string
            format: password

      Todo:
        type: object
        required:
          - title
        properties:
          _id:
            type: string
            description: The auto-generated ID of the todo
          title:
            type: string
            description: The title of the todo item
          description:
            type: string
            description: Detailed description of the todo item
          priority:
            type: string
            enum: [High, Medium, Low]
            default: Low
          dueDate:
            type: string
            format: date-time
          status:
            type: string
            enum: [pending, completed]
            default: pending
          user:
            type: string
            description: ID of the user who owns this todo
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time

      TodoCreate:
        type: object
        required:
          - title
        properties:
          title:
            type: string
          description:
            type: string
          priority:
            type: string
            enum: [High, Medium, Low]
          dueDate:
            type: string
            format: date
          status:
            type: string
            enum: [pending, completed]

      TodoBulkCreate:
        type: object
        required:
          - todos
        properties:
          todos:
            type: array
            items:
              $ref: '#/components/schemas/TodoCreate'

      TodoUpdate:
        type: object
        properties:
          title:
            type: string
          description:
            type: string
          priority:
            type: string
            enum: [High, Medium, Low]
          dueDate:
            type: string
            format: date
          status:
            type: string
            enum: [pending, completed]

      TodoBulkUpdate:
        type: object
        required:
          - todos
        properties:
          todos:
            type: array
            items:
              $ref: '#/components/schemas/TodoUpdate'

      Pagination:
        type: object
        properties:
          page:
            type: integer
            description: Current page number
          limit:
            type: integer
            description: Number of items per page
          total:
            type: integer
            description: Total number of items available
      searchKeyword:
        name: keyword
        in: query
        description: Keyword to search todos by title or description
        required: true
        schema:
          type: string



    responses:
      UnauthorizedError:
        description: Unauthorized - Authentication required
        content:
          application/json:
            example:
              message: "Authentication required"
      
      NotFound:
        description: Not found - The resource could not be found
        content:
          application/json:
            example:
              message: "Resource not found"
      
      ServerError:
        description: Server error - An unexpected error occurred
        content:
          application/json:
            example:
              message: "Internal server error"
      
      ValidationError:
        description: Validation error - The provided data is invalid
        content:
          application/json:
            example:
              message: "Validation failed"

    parameters:
      todoId:
        name: id
        in: path
        required: true
        description: The ID of the todo
        schema:
          type: string

      searchKeyword:
        name: keyword
        in: query
        required: true
        description: Search term for todos
        schema:
          type: string

      page:
        name: page
        in: query
        required: true
        description: The page number to retrieve
        schema:
          type: integer
          default: 1

      limit:
        name: limit
        in: query
        required: true
        description: Number of items per page
        schema:
          type: integer
          default: 10

      sort:
        name: sort
        in: query
        required: false
        description: Sort order for todos
        schema:
          type: string
          enum: [asc, desc]
          default: asc

    examples:
      SingleTodoCreate:
        value:
          title: "Buy groceries"
          description: "Need to buy milk, eggs, and bread"
          priority: "High"
          dueDate: "2025-01-15"

      BulkTodoCreate:
        value:
            - title: "Buy groceries"
              description: "Need to buy milk, eggs, and bread"
              priority: "High"
              dueDate: "2025-01-15"
            - title: "Study React"
              description: "Complete ReactJS tutorial"
              priority: "medium"
              dueDate: "2025-01-20"

      SingleTodoResponse:
        value:
          _id: "507f1f77bcf86cd799439011"
          title: "Buy groceries"
          description: "Need to buy milk, eggs, and bread"
          priority: "High"
          dueDate: "2025-01-15"
          user: "507f1f77bcf86cd799439011"
          createdAt: "2025-01-04T12:00:00Z"
          updatedAt: "2025-01-05T12:00:00Z"

      BulkTodoResponse:
        value:
          todos:
            - _id: "507f1f77bcf86cd799439011"
              title: "Buy groceries"
              description: "Need to buy milk, eggs, and bread"
              priority: "High"
              dueDate: "2025-01-15"
              user: "507f1f77bcf86cd799439011"
              createdAt: "2025-01-04T12:00:00Z"
              updatedAt: "2025-01-05T12:00:00Z"
            - _id: "507f1f77bcf86cd799439012"
              title: "Study React"
              description: "Complete ReactJS tutorial"
              priority: "Medium"
              dueDate: "2025-01-20"
              user: "507f1f77bcf86cd799439011"
              createdAt: "2025-01-04T12:00:00Z"
              updatedAt: "2025-01-05T12:00:00Z"


  paths:
    # Authentication & User Routes
    /api/users/register:
      post:
        tags: [Authentication]
        summary: Register a new user
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
              example:
                name: John Doe
                email: john@example.com
                password: securePassword123
        responses:
          '201':
            description: User registered successfully
            content:
              application/json:
                example:
                  message: User registered successfully
                  user:
                    id: 507f1f77bcf86cd799439011
                    name: John Doe
                    email: john@example.com
          '400':
            $ref: '#/components/responses/UserExists'
          '500':
            $ref: '#/components/responses/ServerError'

    /api/users/login:
      post:
        tags: [Authentication]
        summary: Login a user
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
              example:
                email: john@example.com
                password: securePassword123
        responses:
          '200':
            description: User logged in successfully
            content:
              application/json:
                example:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    id: 507f1f77bcf86cd799439011
                    name: John Doe
                    email: john@example.com
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    /api/users/profile:
      get:
        tags: [Users]
        summary: Get the logged-in user's profile
        security:
          - BearerAuth: []  # This applies the Bearer token authentication to this endpoint
        responses:
          '200':
            description: User profile data
            content:
              application/json:
                example:
                  id: 507f1f77bcf86cd799439011
                  name: John Doe
                  email: john@example.com
          '401':
            $ref: '#/components/responses/UnauthorizedError'

    # Todo Routes
    /api/todos/alltodos:
      get:
        tags: [Todos]
        summary: Get all todos for the logged-in user
        security:
          - BearerAuth: []
        responses:
          '200':
            description: List of todos
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Todo'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
    /api/todos/todos:
      post:
        tags: [Todos]
        summary: Create single todo
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreate'
              examples:
                single:
                  $ref: '#/components/examples/SingleTodoCreate'
        responses:
          '201':
            description: Todo created successfully
            content:
              application/json:
                examples:
                  single:
                    $ref: '#/components/examples/SingleTodoResponse'
          '400':
            $ref: '#/components/responses/ValidationError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
    /api/todos/bulk:
      post:
        tags: [Todos]
        summary: Create multiple todos
        security:
          - BearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoBulkCreate'
              examples:
                bulk:
                  $ref: '#/components/examples/BulkTodoCreate'
        responses:
          '201':
            description: Todos created successfully
            content:
              application/json:
                examples:
                  bulk:
                    $ref: '#/components/examples/BulkTodoResponse'
          '400':
            $ref: '#/components/responses/ValidationError'
          '401':
            $ref: '#/components/responses/UnauthorizedError'
    /api/todos/{id}:
      get:
        tags: [Todos]
        summary: Get a single todo by ID
        security:
          - BearerAuth: []
        parameters:
          - $ref: '#/components/parameters/todoId'
        responses:
          '200':
            description: Todo details
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Todo'
          '404':
            $ref: '#/components/responses/NotFound'
    /api/todos/update/{id}:
      put:
        tags: [Todos]
        summary: Update a todo by ID
        security:
          - BearerAuth: []
        parameters:
          - name: id
            in: path
            required: true
            description: The ID of the todo to update
            schema:
              type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoCreate'
              examples:
                single:
                  $ref: '#/components/examples/SingleTodoCreate'
              properties:
                title:
                  type: string
                  description: The title of the todo
                description:
                  type: string
                  description: A detailed description of the todo
                  example: "Add documentation for the update and delete routes."
                priority:
                  type: string
                  description: The priority level of the todo
                  example: "High"
                dueDate:
                  type: string
                  format: date
                  description: The due date for the todo
                  example: "2025-01-15"
        responses:
          '200':
            description: Todo updated successfully
            
          '400':
            description: Bad request
            content:
              application/json:
                schema:
                  type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Validation error"
          '404':
            description: Todo not found
            content:
              application/json:
               schema:
                type: object
                properties:
                  success:
                    type: boolean
                      example: false
                    message:
                      type: string
                      example: "Todo not found."
          '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      example: false
                    message:
                      type: string
                      example: "An error occurred."
    /api/todos/delete/{id}:
      delete:
        tags: [Todos]
        summary: Delete a todo by ID
        security:
          - BearerAuth: []
        parameters:
          - $ref: '#/components/parameters/todoId'
        responses:
          '200':
            description: Todo deleted successfully
            content:
              application/json:
                example:
                  message: Todo deleted successfully
          '404':
            $ref: '#/components/responses/NotFound'
    /api/todos/search:
      get:
        tags: [Todos]
        summary: Search todos by keyword
        security:
          - BearerAuth: []
        parameters:
          - $ref: '#/components/parameters/searchKeyword'
        responses:
          '200':
            description: List of matching todos
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Todo'
          '400':
            $ref: '#/components/responses/ValidationError'
    /api/todos/paginate:
      get:
        tags: [Todos]
        summary: Get paginated todos
        security:
          - BearerAuth: []
        parameters:
          - $ref: '#/components/parameters/page'
          - $ref: '#/components/parameters/limit'
          - $ref: '#/components/parameters/sort'
        responses:
          '200':
            description: Paginated list of todos
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    todos:
                      type: array
                      items:
                        $ref: '#/components/schemas/Todo'
                    pagination:
                      $ref: '#/components/schemas/Pagination'

