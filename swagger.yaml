openapi: 3.0.0
info:
  title: Todo App API
  description: Complete API documentation for the Todo Application with authentication and todo management
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://todo-nodejs-7bwy.onrender.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Todos
    description: Todo management endpoints

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 6

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    Todo:
      type: object
      required:
        - title
      properties:
        _id:
          type: string
          description: The auto-generated ID of the todo
        title:
          type: string
          description: The title of the todo item
        description:
          type: string
          description: Detailed description of the todo item
        priority:
          type: string
          enum: [High, Medium, Low]
          default: Low
        dueDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [Pending, In Progress, Completed]
          default: Pending
        user:
          type: string
          description: ID of the user who owns this todo
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TodoCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [High, Medium, Low]
        dueDate:
          type: string
          format: date
        status:
          type: string
          enum: [Pending, In Progress, Completed]

    TodoBulkCreate:
      type: object
      required:
        - todos
      properties:
        todos:
          type: array
          items:
            $ref: '#/components/schemas/TodoCreate'

    TodoUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [High, Medium, Low]
        dueDate:
          type: string
          format: date
        status:
          type: string
          enum: [Pending, In Progress, Completed]
    PaginatedTodos:
      type: object
      properties:
        todos:
          type: array
          items:
            $ref: '#/components/schemas/Todo'
        pagination:
          $ref: '#/components/schemas/Pagination'
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total:
          type: integer
          description: Total number of items available

  responses:
    UnauthorizedError:
      description: Unauthorized - Authentication required
      content:
        application/json:
          example:
            message: "Authentication required"

    NotFound:
      description: Not found - The resource could not be found
      content:
        application/json:
          example:
            message: "Resource not found"

    ServerError:
      description: Server error - An unexpected error occurred
      content:
        application/json:
          example:
            message: "Internal server error"

    ValidationError:
      description: Validation error - The provided data is invalid
      content:
        application/json:
          example:
            message: "Validation failed"
    UserExists:
      description: Registration Error - user already login
      content:
        application/json:
          example:
            message: "Registration Error"

  parameters:
    todoId:
      name: id
      in: path
      required: true
      description: The ID of the todo
      schema:
        type: string

    searchKeyword:
      name: keyword
      in: query
      required: true
      description: Search term for todos
      schema:
        type: string

    page:
      name: page
      in: query
      required: true
      description: The page number to retrieve
      schema:
        type: integer
        default: 1

    limit:
      name: limit
      in: query
      required: true
      description: Number of items per page
      schema:
        type: integer
        default: 10

    sort:
      name: sort
      in: query
      required: false
      description: Sort order for todos
      schema:
        type: string
        enum: [asc, desc]
        default: asc

  examples:
    SingleTodoCreate:
      value:
        title: "Buy groceries"
        description: "Need to buy milk, eggs, and bread"
        priority: "High"
        dueDate: "2025-01-15"
        status: "Pending"

    BulkTodoCreate:
      value:
          - title: "Buy groceries"
            description: "Need to buy milk, eggs, and bread"
            priority: "High"
            dueDate: "2025-01-15"
            status: "Pending"
          - title: "Study React"
            description: "Complete ReactJS tutorial"
            priority: "Medium"
            dueDate: "2025-01-20"
            status: "In Progress"

    SingleTodoResponse:
      value:
        _id: "507f1f77bcf86cd799439011"
        title: "Buy groceries"
        description: "Need to buy milk, eggs, and bread"
        priority: "High"
        dueDate: "2025-01-15"
        status: "pending"
        user: "507f1f77bcf86cd799439011"
        createdAt: "2025-01-04T12:00:00Z"
        updatedAt: "2025-01-05T12:00:00Z"

    BulkTodoResponse:
      value:
        todos:
          - _id: "507f1f77bcf86cd799439011"
            title: "Buy groceries"
            description: "Need to buy milk, eggs, and bread"
            priority: "High"
            dueDate: "2025-01-15"
            status: "pending"
            user: "507f1f77bcf86cd799439011"
            createdAt: "2025-01-04T12:00:00Z"
            updatedAt: "2025-01-05T12:00:00Z"
          - _id: "507f1f77bcf86cd799439012"
            title: "Study React"
            description: "Complete ReactJS tutorial"
            priority: "Medium"
            status: "In Progress"
            dueDate: "2025-01-20"
            user: "507f1f77bcf86cd799439011"
            createdAt: "2025-01-04T12:00:00Z"
            updatedAt: "2025-01-05T12:00:00Z"

paths:
  # Authentication & User Routes
  /api/user/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              name: John Doe
              email: john@example.com
              password: securePassword123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              example:
                message: User registered successfully
                user:
                  id: 507f1f77bcf86cd799439011
                  name: John Doe
                  email: john@example.com
        '400':
          $ref: '#/components/responses/UserExists'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/user/login:
    post:
      tags: [Authentication]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: john@example.com
              password: securePassword123
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                user:
                  id: 507f1f77bcf86cd799439011
                  name: John Doe
                  email: john@example.com
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/user/profile:
    get:
      tags: [Users]
      summary: Get the logged-in user's profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              example:
                id: 507f1f77bcf86cd799439011
                name: John Doe
                email: john@example.com
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Todo Routes
  /api/todo/createtodo:
    post:
      tags: [Todos]
      summary: Create single or multiple todos
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TodoCreate'
                - $ref: '#/components/schemas/TodoBulkCreate'
            examples:
              single:
                $ref: '#/components/examples/SingleTodoCreate'
              bulk:
                $ref: '#/components/examples/BulkTodoCreate'
      responses:
        '201':
          description: Todo(s) created successfully
          content:
            application/json:
              examples:
                single:
                  $ref: '#/components/examples/SingleTodoResponse'
                bulk:
                  $ref: '#/components/examples/BulkTodoResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/todo:
    get:
      tags: [Todos]
      summary: Get all todos, paginate todos, or search todos
      security:
        - BearerAuth: []
      parameters:
        - name: keyword
          in: query
          required: false
          description: Search term for todos
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                    description: List of all todos (for getalltodos)
                  - $ref: '#/components/schemas/PaginatedTodos'
                    description: Paginated todos (for paginate)
                  - type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                    description: Search results (for search)
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/todo/update/{id}:
    put:
      tags: [Todos]
      summary: Update a todo by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreate'
            examples:
              single:
                $ref: '#/components/examples/SingleTodoCreate'

      responses:
        '200':
          description: Todo updated successfully

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object

        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                type: object

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "An error occurred."

  /api/todo/delete/{id}:
    delete:
      tags: [Todos]
      summary: Delete a todo by ID
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/todoId'
      responses:
        '200':
          description: Todo deleted successfully
          content:
            application/json:
              example:
                message: Todo deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'